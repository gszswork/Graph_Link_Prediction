# -*- coding: utf-8 -*-
"""graphite_colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uvf8F-mFSlwpymdfMPqpbFhxnWoMKi6i
"""

!wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
!chmod +x Miniconda3-latest-Linux-x86_64.sh
!./Miniconda3-latest-Linux-x86_64.sh -b -p /usr/local -f

! conda install -c milagraph -c conda-forge graphvite python=3.7 cudatoolkit=10.1 -y

!conda install -y wurlitzer ipykernel

# Commented out IPython magic to ensure Python compatibility.
import site
site.addsitedir("/usr/local/lib/python3.7/site-packages")
# %reload_ext wurlitzer

import torch
from graphvite.application.network import LinkPredictor

def get_score(model, H, T):
    '''
    Get the un-normalized score (similarity) for `H` and `T` 
    within the given `model`
    '''
    model = LinkPredictor('LINE', model.solver.vertex_embeddings, model.solver.context_embeddings)
    model = model
    tensorH = torch.as_tensor(H)
    tensorT = torch.as_tensor(T)
    return model(tensorH, tensorT)

cd drive/MyDrive/COMP90051/

! graphvite run my_config.yml

import pickle

dim = 32
length = 40
method = 'line'
directed = False
emb = f'embedding/dim{dim}-len{length}/{"directed_" if directed else ""}{method}_full.pkl'

model = pickle.load(open(emb, 'rb'))

H, T = [], []
mapping = model.graph.name2id
with open('data/test-public.csv', 'r') as f:
    next(f)
    for line in f:
        _, h, t = line.split(',')
        h = str(int(h))
        t = str(int(t))
        if h in mapping:
            H.append(mapping[h])
        else:
            H.append(999)
        if t in mapping:
            T.append(mapping[t])
        else:
            T.append(999)

score = get_score(model, H, T)
# normalize the scores to probabilities
smin = score.min(0, keepdim=True)[0]
smax = score.max(0, keepdim=True)[0]
score -= smin
score /= (smax - smin)

print(score)

# save the output
out = f'output/dim{dim}-len{length}_{"" if directed else "un"}directed_{method}.csv'
out = 'random_walk1.csv'
with open(out, 'w') as o:
    o.write('Id,Predicted\n')
    for i, s in enumerate(score.tolist()):
        o.write(f'{i+1},{s}\n')
print('Write output to', out)